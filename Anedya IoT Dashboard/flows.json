[
  {
    "id": "cc64dd72e548f89a",
    "type": "tab",
    "label": "Home Page",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "24e1411905e488b9",
    "type": "tab",
    "label": "Settings Page",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "7bef6a87fd115472",
    "type": "tab",
    "label": "UI Settings",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "453eb1bafa2a452d",
    "type": "subflow",
    "name": "Subflow 2",
    "info": "",
    "in": [{ "x": 60, "y": 120, "wires": [{ "id": "f8a94a7944f01add" }] }],
    "out": [
      { "x": 860, "y": 140, "wires": [{ "id": "599d0d1c4ff58cf6", "port": 0 }] }
    ]
  },
  {
    "id": "a69cb8b724ad96f5",
    "type": "subflow",
    "name": "Subflow 3",
    "info": "",
    "in": [{ "x": 60, "y": 80, "wires": [{ "id": "12c3afe385ecde61" }] }],
    "out": [
      { "x": 860, "y": 80, "wires": [{ "id": "862b5f4e2026532f", "port": 0 }] }
    ]
  },
  {
    "id": "c8cff3130fedb456",
    "type": "subflow",
    "name": "Subflow 4",
    "info": "",
    "in": [{ "x": 60, "y": 80, "wires": [{ "id": "2d5e90c9b70b1091" }] }],
    "out": [
      { "x": 840, "y": 80, "wires": [{ "id": "ba1e425263033308", "port": 0 }] }
    ]
  },
  {
    "id": "227ddad2c9e7f866",
    "type": "subflow",
    "name": "Subflow 5",
    "info": "",
    "in": [{ "x": 60, "y": 80, "wires": [{ "id": "db601e197997b2fd" }] }],
    "out": [
      { "x": 920, "y": 80, "wires": [{ "id": "fe87a67ec82f45a8", "port": 0 }] }
    ]
  },
  {
    "id": "0b2ea012802cacb5",
    "type": "subflow",
    "name": "Subflow 6",
    "info": "",
    "in": [{ "x": 60, "y": 80, "wires": [{ "id": "c9d4c5a6e586d66f" }] }],
    "out": [
      { "x": 940, "y": 80, "wires": [{ "id": "6f4e0351336dd2cd", "port": 0 }] }
    ]
  },
  {
    "id": "2a4cccc1f2ec666f",
    "type": "ui-base",
    "name": "My Dashboard",
    "path": "/dashboard",
    "includeClientData": true,
    "acceptsClientConfig": ["ui-notification", "ui-control"],
    "showPathInSidebar": false,
    "showPageTitle": true,
    "navigationStyle": "default",
    "titleBarStyle": "default"
  },
  {
    "id": "b8c087a030a40e88",
    "type": "ui-theme",
    "name": "Default Theme",
    "colors": {
      "surface": "#13458c",
      "primary": "#0095ff",
      "bgPage": "#050505",
      "groupBg": "#f8fcfa",
      "groupOutline": "#e8eded"
    },
    "sizes": {
      "pagePadding": "12px",
      "groupGap": "12px",
      "groupBorderRadius": "4px",
      "widgetGap": "12px"
    }
  },
  {
    "id": "91ca877ba92392b8",
    "type": "ui-page",
    "name": "Home",
    "ui": "2a4cccc1f2ec666f",
    "path": "/home",
    "icon": "home",
    "layout": "grid",
    "theme": "b8c087a030a40e88",
    "order": 1,
    "className": "",
    "visible": true,
    "disabled": false
  },
  {
    "id": "c880cc57dd566c40",
    "type": "ui-page",
    "name": "Settings",
    "ui": "2a4cccc1f2ec666f",
    "path": "/settings",
    "icon": "home",
    "layout": "grid",
    "theme": "b8c087a030a40e88",
    "order": 2,
    "className": "",
    "visible": true,
    "disabled": false
  },
  {
    "id": "608ec21444db933d",
    "type": "ui-group",
    "name": "Controls",
    "page": "91ca877ba92392b8",
    "width": "2",
    "height": "1",
    "order": 2,
    "showTitle": true,
    "className": "my-custom-class",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "65d2902c5e05e02c",
    "type": "ui-group",
    "name": "Anedya connection credentials",
    "page": "c880cc57dd566c40",
    "width": "4",
    "height": "1",
    "order": 1,
    "showTitle": true,
    "className": "",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "ad25646ff154522b",
    "type": "ui-group",
    "name": "Admin Panel",
    "page": "c880cc57dd566c40",
    "width": "2",
    "height": "1",
    "order": 2,
    "showTitle": true,
    "className": "",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "d62eb6f272bd1da6",
    "type": "ui-group",
    "name": "Current Temperature",
    "page": "91ca877ba92392b8",
    "width": "2",
    "height": "1",
    "order": 3,
    "showTitle": true,
    "className": "my-custom-class",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "74c256c6933f8b6f",
    "type": "ui-group",
    "name": "Temperature Chart",
    "page": "91ca877ba92392b8",
    "width": "6",
    "height": "1",
    "order": 6,
    "showTitle": true,
    "className": "",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "aedb0d75dc453f72",
    "type": "ui-group",
    "name": "Current Humidity",
    "page": "91ca877ba92392b8",
    "width": "2",
    "height": "1",
    "order": 4,
    "showTitle": true,
    "className": "my-custom-class",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "55fbfd637ade4285",
    "type": "ui-group",
    "name": "Humidity chart",
    "page": "91ca877ba92392b8",
    "width": "6",
    "height": "1",
    "order": 7,
    "showTitle": true,
    "className": "",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "cc9daaeac75086db",
    "type": "ui-group",
    "name": "Device Status",
    "page": "91ca877ba92392b8",
    "width": "2",
    "height": "1",
    "order": 1,
    "showTitle": true,
    "className": "my-custom-class",
    "visible": "true",
    "disabled": "false",
    "groupType": "default"
  },
  {
    "id": "7da969187e283dbb",
    "type": "ui-group",
    "name": "Branding",
    "page": "91ca877ba92392b8",
    "width": "4",
    "height": "1",
    "order": 5,
    "showTitle": false,
    "className": "",
    "visible": "true",
    "disabled": "false"
  },
  {
    "id": "f8a94a7944f01add",
    "type": "function",
    "z": "453eb1bafa2a452d",
    "name": "Config Get Device Connectivity",
    "func": "// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\nvar NODE_ID=global.get(\"NODE_ID\");\n\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\n// Create the payload object\nlet payloadObj = {\n    \"nodes\": [\n        NODE_ID\n    ],\n    \"lastContactThreshold\": 120\n};\n\n// Convert the payload object to a JSON string\nmsg.payload = JSON.stringify(payloadObj);\n\n// Return the message object\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 266.14308166503906,
    "y": 121.14290142059326,
    "wires": [["103034258cbe9adc"]]
  },
  {
    "id": "103034258cbe9adc",
    "type": "http request",
    "z": "453eb1bafa2a452d",
    "name": "post request",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/health/status",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 506.14308166503906,
    "y": 121.14290142059326,
    "wires": [["8da21e058f465817", "599d0d1c4ff58cf6"]]
  },
  {
    "id": "8da21e058f465817",
    "type": "debug",
    "z": "453eb1bafa2a452d",
    "name": "debug 17",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "false",
    "statusVal": "",
    "statusType": "auto",
    "x": 696.1430816650391,
    "y": 81.14290142059326,
    "wires": []
  },
  {
    "id": "599d0d1c4ff58cf6",
    "type": "function",
    "z": "453eb1bafa2a452d",
    "name": "function 16",
    "func": "const parsedData = JSON.parse(msg.payload);\nlet online = parsedData.data[\"20deeee8-f8ae-11ee-9dd8-c3aa61afe2fb\"].online;\n//online=0;\nif (online) {\n    msg.payload = online;\n    msg.status=\"Online\";\n    msg.deviceLiveStatus=1;\n    global.set(\"is_device_on\",true)\n    \n}else{\n    msg.payload = online;\n    msg.status=\"Offline\";\n    msg.deviceLiveStatus=0;\n    global.set(\"is_device_on\",false)\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 705.0001831054688,
    "y": 140.00002765655518,
    "wires": [[]]
  },
  {
    "id": "12c3afe385ecde61",
    "type": "function",
    "z": "a69cb8b724ad96f5",
    "name": "Config Get Light Currrent State",
    "func": "// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\nvar NODE_ID=global.get(\"NODE_ID\");\n\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\n// Create the payload object\nlet payloadObj = {\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Light\"\n};\n\n// Convert the payload object to a JSON string\nmsg.payload = JSON.stringify(payloadObj);\n\n// Return the message object\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 264.9999771118164,
    "y": 72.5,
    "wires": [["c1cc3cceb3fe9e59"]]
  },
  {
    "id": "c1cc3cceb3fe9e59",
    "type": "http request",
    "z": "a69cb8b724ad96f5",
    "name": "post request",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/valuestore/getValue",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 484.9999771118164,
    "y": 72.5,
    "wires": [["862b5f4e2026532f"]]
  },
  {
    "id": "862b5f4e2026532f",
    "type": "function",
    "z": "a69cb8b724ad96f5",
    "name": "response handling",
    "func": "const parsedData = JSON.parse(msg.payload);\nconst value = parsedData.value;\nmsg.payload=value\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 684.9999771118164,
    "y": 72.5,
    "wires": [[]]
  },
  {
    "id": "2d5e90c9b70b1091",
    "type": "function",
    "z": "c8cff3130fedb456",
    "name": "Config Get Fan Currrent State",
    "func": "// Retrieve the NODE ID from global context\nvar NODE_ID=global.get(\"NODE_ID\");\n\n// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\n// Create the payload object\nlet payloadObj = {\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Fan\"\n};\n\n// Convert the payload object to a JSON string\nmsg.payload = JSON.stringify(payloadObj);\n\n// Return the message object\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 264.9999771118164,
    "y": 72.5,
    "wires": [["f4c0839d5174e82e"]]
  },
  {
    "id": "f4c0839d5174e82e",
    "type": "http request",
    "z": "c8cff3130fedb456",
    "name": "post request",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/valuestore/getValue",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "other",
        "valueValue": "Bearer c93b7fdbcb11a189e8f33a89d1bfa56f92836d5ed3c148ec9bf912f29a9abee5"
      },
      {
        "keyType": "Accept",
        "keyValue": "",
        "valueType": "application/json",
        "valueValue": ""
      }
    ],
    "x": 484.9999771118164,
    "y": 72.5,
    "wires": [["ba1e425263033308"]]
  },
  {
    "id": "ba1e425263033308",
    "type": "function",
    "z": "c8cff3130fedb456",
    "name": "response handling",
    "func": "const parsedData = JSON.parse(msg.payload);\nconst value = parsedData.value;\nmsg.payload=value\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 664.9999771118164,
    "y": 72.5,
    "wires": [[]]
  },
  {
    "id": "db601e197997b2fd",
    "type": "function",
    "z": "227ddad2c9e7f866",
    "name": "Config Get Latest Temperature Data",
    "func": "// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\nvar NODE_ID =global.get(\"NODE_ID\");\n\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\n// Create the payload object\nlet payloadObj = {\n    \"nodes\": [\n       NODE_ID\n    ],\n    \"variable\": \"temperature\"\n};\n\n// Convert the payload object to a JSON string\nmsg.payload = JSON.stringify(payloadObj);\n\n// Return the message object\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 291.66664123535156,
    "y": 78.33335304260254,
    "wires": [["59c9683ac1cecc4b"]]
  },
  {
    "id": "59c9683ac1cecc4b",
    "type": "http request",
    "z": "227ddad2c9e7f866",
    "name": "post request",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/data/latest",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 590,
    "y": 80,
    "wires": [["fe87a67ec82f45a8"]]
  },
  {
    "id": "fe87a67ec82f45a8",
    "type": "function",
    "z": "227ddad2c9e7f866",
    "name": "function 1",
    "func": "\n    const value = JSON.parse(msg.payload).data[\"20deeee8-f8ae-11ee-9dd8-c3aa61afe2fb\"].value;\n    if (global.get(\"is_device_on\")) {\n        msg.payload = value;  // Convert the value to a string\n    }else{\n        msg.payload = NaN;  // Convert the value to a string\n    }\n\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 781.6666412353516,
    "y": 78.33335304260254,
    "wires": [[]]
  },
  {
    "id": "c9d4c5a6e586d66f",
    "type": "function",
    "z": "0b2ea012802cacb5",
    "name": "Config Get Latest Humidity Data",
    "func": "// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\nvar NODE_ID=global.get(\"NODE_ID\");\n\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\n// Create the payload object\nlet payloadObj = {\n    \"nodes\": [\n        NODE_ID\n    ],\n    \"variable\": \"humidity\"\n};\n\n// Convert the payload object to a JSON string\nmsg.payload = JSON.stringify(payloadObj);\n\n// Return the message object\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 270,
    "y": 80,
    "wires": [["5ac3453baed4a0e7"]]
  },
  {
    "id": "5ac3453baed4a0e7",
    "type": "http request",
    "z": "0b2ea012802cacb5",
    "name": "post request",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/data/latest",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 590,
    "y": 80,
    "wires": [["6f4e0351336dd2cd"]]
  },
  {
    "id": "6f4e0351336dd2cd",
    "type": "function",
    "z": "0b2ea012802cacb5",
    "name": "function 15",
    "func": "const parsedData = JSON.parse(msg.payload);\nconst value = parsedData.data[\"20deeee8-f8ae-11ee-9dd8-c3aa61afe2fb\"].value;\nif (global.get(\"is_device_on\")) {\n    msg.payload = value;\n}else{\n    msg.payload=NaN;\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "30733624289f93a6",
    "type": "inject",
    "z": "cc64dd72e548f89a",
    "name": "Get Temp&Hum",
    "props": [],
    "repeat": "2",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "x": 250,
    "y": 900,
    "wires": [["952577acc41c307d", "bb21209b955fb1f3"]]
  },
  {
    "id": "dce12d47baa079ca",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 2",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 860,
    "wires": []
  },
  {
    "id": "7179195eaf859061",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 4",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1230,
    "y": 1060,
    "wires": []
  },
  {
    "id": "f6a975daf07485e8",
    "type": "ui-chart",
    "z": "cc64dd72e548f89a",
    "group": "74c256c6933f8b6f",
    "name": "Temperature chart 2.0",
    "label": "",
    "order": 1,
    "chartType": "line",
    "category": "topic",
    "categoryType": "msg",
    "xAxisLabel": "Time",
    "xAxisProperty": "",
    "xAxisPropertyType": "property",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "yAxisLabel": "Celsius (°C)",
    "yAxisProperty": "",
    "ymin": "",
    "ymax": "",
    "action": "append",
    "stackSeries": false,
    "pointShape": "line",
    "pointRadius": "2",
    "showLegend": false,
    "removeOlder": "15",
    "removeOlderUnit": "60",
    "removeOlderPoints": "2000",
    "colors": [
      "#0095ff",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": ["#666666"],
    "textColorDefault": true,
    "gridColor": ["#e5e5e5"],
    "gridColorDefault": true,
    "width": "6",
    "height": "5",
    "className": "",
    "x": 1260,
    "y": 800,
    "wires": [[]]
  },
  {
    "id": "8e9a4a6a9d353943",
    "type": "ui-gauge",
    "z": "cc64dd72e548f89a",
    "name": "Temperature Gauge ",
    "group": "d62eb6f272bd1da6",
    "order": 1,
    "width": "2",
    "height": "3",
    "gtype": "gauge-half",
    "gstyle": "needle",
    "title": "",
    "units": "°C",
    "icon": "",
    "prefix": "",
    "suffix": "",
    "segments": [
      { "from": "0", "color": "#5cd65c" },
      { "from": "35", "color": "#ffc800" },
      { "from": "70", "color": "#ea5353" }
    ],
    "min": 0,
    "max": "100",
    "sizeThickness": "16",
    "sizeGap": "4",
    "sizeKeyThickness": 8,
    "styleRounded": true,
    "styleGlow": false,
    "className": "custom-gauge-css",
    "x": 1260,
    "y": 740,
    "wires": []
  },
  {
    "id": "4374941834cd5278",
    "type": "ui-gauge",
    "z": "cc64dd72e548f89a",
    "name": "Humidity Gauge 2.0",
    "group": "aedb0d75dc453f72",
    "order": 1,
    "width": "2",
    "height": "3",
    "gtype": "gauge-half",
    "gstyle": "needle",
    "title": "",
    "units": "%",
    "icon": "",
    "prefix": "",
    "suffix": "",
    "segments": [
      { "from": "0", "color": "#5cd65c" },
      { "from": "35", "color": "#ffc800" },
      { "from": "70", "color": "#252be4" }
    ],
    "min": 0,
    "max": "100",
    "sizeThickness": 16,
    "sizeGap": 4,
    "sizeKeyThickness": 8,
    "styleRounded": true,
    "styleGlow": false,
    "className": "custom-gauge-css",
    "x": 1260,
    "y": 940,
    "wires": []
  },
  {
    "id": "542ee6e44901b351",
    "type": "ui-chart",
    "z": "cc64dd72e548f89a",
    "group": "55fbfd637ade4285",
    "name": "Humidity chart",
    "label": "",
    "order": 1,
    "chartType": "line",
    "category": "topic",
    "categoryType": "msg",
    "xAxisLabel": "Time",
    "xAxisProperty": "",
    "xAxisPropertyType": "property",
    "xAxisType": "time",
    "xAxisFormat": "",
    "xAxisFormatType": "auto",
    "yAxisLabel": "percent (%)",
    "yAxisProperty": "",
    "ymin": "",
    "ymax": "",
    "action": "append",
    "stackSeries": false,
    "pointShape": "line",
    "pointRadius": "2",
    "showLegend": false,
    "removeOlder": "15",
    "removeOlderUnit": "60",
    "removeOlderPoints": "2000",
    "colors": [
      "#0095ff",
      "#ff0000",
      "#ff7f0e",
      "#2ca02c",
      "#a347e1",
      "#d62728",
      "#ff9896",
      "#9467bd",
      "#c5b0d5"
    ],
    "textColor": ["#666666"],
    "textColorDefault": true,
    "gridColor": ["#e5e5e5"],
    "gridColorDefault": true,
    "width": "6",
    "height": "5",
    "className": "",
    "x": 1240,
    "y": 1000,
    "wires": [[]]
  },
  {
    "id": "96f20efd1e708518",
    "type": "ui-button",
    "z": "cc64dd72e548f89a",
    "group": "608ec21444db933d",
    "name": "ALL-ON Button",
    "label": "All ON",
    "order": 4,
    "width": "1",
    "height": "1",
    "emulateClick": false,
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "iconPosition": "left",
    "payload": "true",
    "payloadType": "bool",
    "topic": "topic",
    "topicType": "msg",
    "buttonColor": "'green'",
    "textColor": "",
    "iconColor": "",
    "enableClick": true,
    "enablePointerdown": false,
    "pointerdownPayload": "",
    "pointerdownPayloadType": "str",
    "enablePointerup": false,
    "pointerupPayload": "",
    "pointerupPayloadType": "str",
    "x": 780,
    "y": 460,
    "wires": [
      [
        "bea6ac6d48e00268",
        "ad94c98b4df40846",
        "4adaf38a5b456694",
        "9e25a35f4bccae43",
        "a6ee086ccbece116",
        "ead59d17cfacd9ba"
      ]
    ]
  },
  {
    "id": "bea6ac6d48e00268",
    "type": "ui-switch",
    "z": "cc64dd72e548f89a",
    "name": "Light Switch",
    "label": "Light ",
    "group": "608ec21444db933d",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": false,
    "decouple": false,
    "topic": "topic",
    "topicType": "msg",
    "style": "",
    "className": "",
    "onvalue": "true",
    "onvalueType": "bool",
    "onicon": "",
    "oncolor": "",
    "offvalue": "false",
    "offvalueType": "bool",
    "officon": "",
    "offcolor": "",
    "x": 1030,
    "y": 400,
    "wires": [["4adaf38a5b456694", "a6ee086ccbece116"]]
  },
  {
    "id": "ad94c98b4df40846",
    "type": "ui-switch",
    "z": "cc64dd72e548f89a",
    "name": "Fan Switch",
    "label": "Fan ",
    "group": "608ec21444db933d",
    "order": 2,
    "width": 0,
    "height": 0,
    "passthru": false,
    "decouple": false,
    "topic": "topic",
    "topicType": "msg",
    "style": "",
    "className": "",
    "onvalue": "true",
    "onvalueType": "bool",
    "onicon": "",
    "oncolor": "",
    "offvalue": "false",
    "offvalueType": "bool",
    "officon": "",
    "offcolor": "",
    "x": 1030,
    "y": 560,
    "wires": [["9e25a35f4bccae43", "ead59d17cfacd9ba"]]
  },
  {
    "id": "4adaf38a5b456694",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Config & Payload",
    "func": "// Retrieve the NODE ID from global context\nlet NODE_ID=global.get(\"NODE_ID\");\n\n// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\nlet currentEpochTime = Math.floor(Date.now() / 1000);\nlet future_24_hour_time_ms = (currentEpochTime + 86400) * 1000;\nlet button_state\nif (msg.payload){\n    button_state=\"on\"\n}else{\n    button_state=\"off\"\n}\nlet json_payload = {\n    \"nodeid\": NODE_ID,\n    \"command\": \"Light\",\n    \"data\": button_state,\n    \"type\": \"string\",\n    \"expiry\": future_24_hour_time_ms\n};\nmsg.payload = JSON.stringify(json_payload);\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1490,
    "y": 440,
    "wires": [["a0f80171cf12c210"]]
  },
  {
    "id": "9e25a35f4bccae43",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Config & Payload",
    "func": "// Retrieve the NODE ID from global context\nlet NODE_ID=global.get(\"NODE_ID\");\n\n// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\nlet currentEpochTime = Math.floor(Date.now() / 1000);\nlet future_24_hour_time_ms = (currentEpochTime + 86400) * 1000;\nlet button_state\nif (msg.payload){\n    button_state=\"on\"\n}else{\n    button_state=\"off\"\n}\nlet json_payload = {\n    \"nodeid\": NODE_ID,\n    \"command\": \"fan\",\n    \"data\": button_state,\n    \"type\": \"string\",\n    \"expiry\": future_24_hour_time_ms\n};\nmsg.payload = JSON.stringify(json_payload);\nreturn msg;\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1489.9999771118164,
    "y": 540.8333485126495,
    "wires": [["837b9de2b6cf6336"]]
  },
  {
    "id": "350c780bab8f24b9",
    "type": "ui-button",
    "z": "cc64dd72e548f89a",
    "group": "608ec21444db933d",
    "name": "ALL-OFF Button",
    "label": "All OFF",
    "order": 5,
    "width": "1",
    "height": "1",
    "emulateClick": false,
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "",
    "iconPosition": "left",
    "payload": "false",
    "payloadType": "bool",
    "topic": "topic",
    "topicType": "msg",
    "buttonColor": "'green'",
    "textColor": "",
    "iconColor": "",
    "enableClick": true,
    "enablePointerdown": false,
    "pointerdownPayload": "",
    "pointerdownPayloadType": "str",
    "enablePointerup": false,
    "pointerupPayload": "",
    "pointerupPayloadType": "str",
    "x": 780,
    "y": 500,
    "wires": [
      [
        "bea6ac6d48e00268",
        "ad94c98b4df40846",
        "4adaf38a5b456694",
        "ead59d17cfacd9ba",
        "a6ee086ccbece116",
        "9e25a35f4bccae43"
      ]
    ]
  },
  {
    "id": "a0f80171cf12c210",
    "type": "http request",
    "z": "cc64dd72e548f89a",
    "name": "Send Command",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/commands/send",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 1700,
    "y": 440,
    "wires": [["5cdedc1853ef804e"]]
  },
  {
    "id": "837b9de2b6cf6336",
    "type": "http request",
    "z": "cc64dd72e548f89a",
    "name": "Send Command",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/commands/send",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 1700,
    "y": 540,
    "wires": [["5b2c40477b81de8e"]]
  },
  {
    "id": "5b2c40477b81de8e",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 6",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1940,
    "y": 540,
    "wires": []
  },
  {
    "id": "af91af683872a6f0",
    "type": "inject",
    "z": "cc64dd72e548f89a",
    "name": "Sync Light&Fan state",
    "props": [{ "p": "payload" }, { "p": "topic", "vt": "str" }],
    "repeat": "2",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 260,
    "y": 480,
    "wires": [["87f99aa5afa36e47", "cbfd40bd21c5e080"]]
  },
  {
    "id": "a6ee086ccbece116",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Config & Payload",
    "func": "var NODE_ID=global.get(\"NODE_ID\");\n// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\nvar payloadJson\nif(msg.payload){\n    payloadJson={\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Light\",\n  \"value\": true,\n  \"type\": \"boolean\"\n}\n    }else{\n        payloadJson={\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Light\",\n  \"value\": false,\n  \"type\": \"boolean\"\n}\n    }\n\nvar jsonStr=JSON.stringify(payloadJson);\nmsg.payload=jsonStr\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1490,
    "y": 360,
    "wires": [["720a217c81844fa0"]]
  },
  {
    "id": "720a217c81844fa0",
    "type": "http request",
    "z": "cc64dd72e548f89a",
    "name": "[https] Light set key-value",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/valuestore/setValue",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 1730,
    "y": 360,
    "wires": [["a40ab17285a30e01"]]
  },
  {
    "id": "872da5f7bf30417e",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 10",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1940,
    "y": 620,
    "wires": []
  },
  {
    "id": "d6e7d150dec0fda8",
    "type": "http request",
    "z": "cc64dd72e548f89a",
    "name": "[https] Fan set key-value",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.anedya.io/v1/valuestore/setValue",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [
      {
        "keyType": "Authorization",
        "keyValue": "",
        "valueType": "msg",
        "valueValue": "apiKey"
      }
    ],
    "x": 1730,
    "y": 620,
    "wires": [["872da5f7bf30417e"]]
  },
  {
    "id": "ead59d17cfacd9ba",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Config & Payload",
    "func": "// Retrieve the NODE ID from global context\nlet NODE_ID=global.get(\"NODE_ID\");\n\n// Retrieve the API key from global context\nvar apiKey = global.get(\"API_KEY\");\n// Format the API key for authorization\nvar apiKeyInFormat = \"Bearer \" + apiKey;\n\n// Set the headers with the formatted API key\nmsg.apiKey = apiKeyInFormat;\n\nlet payloadJson\nif(msg.payload){\n    payloadJson={\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Fan\",\n  \"value\": true,\n  \"type\": \"boolean\"\n}\n    }else{\n       payloadJson={\n  \"namespace\": {\n    \"scope\": \"node\",\n    \"id\": NODE_ID\n  },\n  \"key\": \"Fan\",\n  \"value\": false,\n  \"type\": \"boolean\"\n}\n    }\n\nvar jsonStr=JSON.stringify(payloadJson);\nmsg.payload=jsonStr\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1489.9999771118164,
    "y": 620.8333485126495,
    "wires": [["d6e7d150dec0fda8"]]
  },
  {
    "id": "c7d57b62287d0c5e",
    "type": "inject",
    "z": "cc64dd72e548f89a",
    "name": "",
    "props": [{ "p": "payload" }, { "p": "topic", "vt": "str" }],
    "repeat": "20",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 270,
    "y": 1180,
    "wires": [["8306ea98ca43c81f"]]
  },
  {
    "id": "8306ea98ca43c81f",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Get Batter Status",
    "func": "let a = Math.floor(Math.random() * 101); // generate a random number between 0 and 100\nif(global.get(\"is_device_on\")){\nmsg.payload = 100;\n}else{\n    msg.payload = NaN;\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 1180,
    "wires": [["426dac5b5175c659"]]
  },
  {
    "id": "426dac5b5175c659",
    "type": "ui-gauge",
    "z": "cc64dd72e548f89a",
    "name": "Battery Level",
    "group": "cc9daaeac75086db",
    "order": 2,
    "width": "2",
    "height": "2",
    "gtype": "gauge-battery",
    "gstyle": "needle",
    "title": "",
    "units": "units",
    "icon": "",
    "prefix": "",
    "suffix": "",
    "segments": [
      { "from": "0", "color": "#ea5353" },
      { "from": "40", "color": "#ffc800" },
      { "from": "70", "color": "#2f35e4" }
    ],
    "min": 0,
    "max": "100",
    "sizeThickness": 16,
    "sizeGap": 4,
    "sizeKeyThickness": 8,
    "styleRounded": true,
    "styleGlow": false,
    "className": "",
    "x": 1230,
    "y": 1180,
    "wires": []
  },
  {
    "id": "209cf70215ee9234",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Convertor",
    "func": "if (msg.payload==true) {\n    // To enable group\n    msg.payload = {\n        groups: {\n            enable: ['Home:Current Temperature','Home:Current Humidity','Home:Controls','Home:Temperature Chart','Home:Humidity chart','Home:Device Status']\n        }\n    };\n\n}\nelse {\n    // To disable group\n    msg.payload = {\n        groups: {\n            disable: ['Home:Current Temperature','Home:Current Humidity','Home:Controls','Home:Temperature Chart','Home:Humidity chart','Home:Device Status']\n        }\n    };\n\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1120,
    "y": 180,
    "wires": [["90da610bb599f318"]]
  },
  {
    "id": "90da610bb599f318",
    "type": "ui-control",
    "z": "cc64dd72e548f89a",
    "name": "",
    "ui": "2a4cccc1f2ec666f",
    "events": "connect",
    "x": 1600,
    "y": 120,
    "wires": [[]]
  },
  {
    "id": "7075051f1553a703",
    "type": "inject",
    "z": "cc64dd72e548f89a",
    "name": "Check Device Connectivity",
    "props": [],
    "repeat": "2",
    "crontab": "",
    "once": false,
    "onceDelay": "1",
    "topic": "",
    "x": 320,
    "y": 200,
    "wires": [["ccce6164d17c0df5"]]
  },
  {
    "id": "a89857e78bc939dd",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Control Light Flow",
    "info": "",
    "x": 590,
    "y": 380,
    "wires": []
  },
  {
    "id": "bfaf64d7b08c2f3e",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Control Fan Flow",
    "info": "",
    "x": 580,
    "y": 520,
    "wires": []
  },
  {
    "id": "d30b80265e227be3",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Check Device Connectivity",
    "info": "",
    "x": 230,
    "y": 160,
    "wires": []
  },
  {
    "id": "58480d1d02d64718",
    "type": "ui-template",
    "z": "cc64dd72e548f89a",
    "group": "cc9daaeac75086db",
    "page": "",
    "ui": "",
    "name": "Device Status Indicator",
    "order": 1,
    "width": 0,
    "height": 0,
    "head": "",
    "format": "<template>\n    <div>\n        <button :style=\"{'background-color' : (msg.status==='Online' ? 'green' : 'red' ), 'width': '10em', 'color': 'white', 'height': '2em','border': '2px solid white',\n  'border-radius': '10px','font-size':'1.8rem',' font-weight':'bold'}\">{{ msg.status }}</button>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            // define variables available component-wide\n            // (in <template> and component functions)\n            return {\n                count: 0\n            }\n        },\n        watch: {\n            // watch for any changes of \"count\"\n            count: function () {\n                if (this.count % 5 === 0) {\n                    this.send({payload: 'Multiple of 5'})\n                }\n            }\n        },\n        computed: {\n            // automatically compute this variable\n            // whenever VueJS deems appropriate\n            formattedCount: function () {\n                return this.count + ' Apples'\n            }\n        },\n        methods: {\n            // expose a method to our <template> and Vue Application\n            increase: function () {\n                this.count++\n            }\n        },\n        mounted() {\n            // code here when the component is first loaded\n        },\n        unmounted() {\n            // code here when the component is removed from the Dashboard\n            // i.e. when the user navigates away from the page\n        }\n    }\n</script>\n<style>\n    /* define any styles here - supports raw CSS */\n    .my-class {\n        color: red;\n    }\n</style>",
    "storeOutMessages": true,
    "passthru": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 1170,
    "y": 220,
    "wires": [[]]
  },
  {
    "id": "bcaa6598236c41da",
    "type": "inject",
    "z": "cc64dd72e548f89a",
    "name": "",
    "props": [{ "p": "bindStatus", "v": "false", "vt": "bool" }],
    "repeat": "5",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "x": 268.8571014404297,
    "y": 98.85712623596191,
    "wires": [["304b674909956add"]]
  },
  {
    "id": "2a9d84ff4f5778d1",
    "type": "ui-notification",
    "z": "cc64dd72e548f89a",
    "ui": "2a4cccc1f2ec666f",
    "position": "bottom right",
    "colorDefault": false,
    "color": "#ff0000",
    "displayTime": "5",
    "showCountdown": false,
    "outputs": 1,
    "allowDismiss": false,
    "dismissText": "",
    "allowConfirm": false,
    "confirmText": "Confirm",
    "raw": false,
    "className": "",
    "name": "Toast Error",
    "x": 810,
    "y": 60,
    "wires": [[]]
  },
  {
    "id": "304b674909956add",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "Node Id and Api Key Checker",
    "func": "// Retrieve NODE_ID and API_KEY from global context\nconst NODE_ID = global.get('NODE_ID');\nconst API_KEY = global.get('API_KEY');\n\n// Initialize response variables\nlet errorMessage = \"Please set a valid Node ID and API Key!\";\nlet isValid = true;\n\n// Check if NODE_ID is empty\nif (!NODE_ID || NODE_ID.trim() === \"\") {\n    isValid = false;\n}\n\n// Check if API_KEY is empty\nif (!API_KEY || API_KEY.trim() === \"\") {\n    isValid = false;\n}\n\n// Set the message payload and bind status based on validation\nif (!isValid) {\n    msg.payload = errorMessage.trim(); // Trim any extra whitespace from the message\n    msg.bindStatus = false;\n} else {\n    msg.bindStatus = true;\n}\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 516.8571472167969,
    "y": 100.8571388721466,
    "wires": [["2a9d84ff4f5778d1", "a019941bc33bf7a7"]]
  },
  {
    "id": "a019941bc33bf7a7",
    "type": "function",
    "z": "cc64dd72e548f89a",
    "name": "handler",
    "func": "if (msg.bindStatus) {\n    // To enable group\n    msg.payload = {\n        groups: {\n            enable: ['Home:Current Temperature','Home:Current Humidity','Home:Controls','Home:Temperature Chart','Home:Humidity chart','Home:Device Status']\n        }\n    };\n\n}\nelse {\n    // To disable group\n    msg.payload = {\n        groups: {\n            disable: ['Home:Current Temperature','Home:Current Humidity','Home:Controls','Home:Temperature Chart','Home:Humidity chart','Home:Device Status']\n        }\n    };\n\n}\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 803.8569183349609,
    "y": 118.85709857940674,
    "wires": [["90da610bb599f318"]]
  },
  {
    "id": "78625791d088e811",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Check For Node Id and Api Key.",
    "info": "Check For Node Id and Api Key.",
    "x": 250,
    "y": 60,
    "wires": []
  },
  {
    "id": "ccce6164d17c0df5",
    "type": "subflow:453eb1bafa2a452d",
    "z": "cc64dd72e548f89a",
    "name": "Check Device Heartbeat",
    "x": 753.8569183349609,
    "y": 198.85709857940674,
    "wires": [["209cf70215ee9234", "58480d1d02d64718"]]
  },
  {
    "id": "87f99aa5afa36e47",
    "type": "subflow:a69cb8b724ad96f5",
    "z": "cc64dd72e548f89a",
    "name": "Get value of key Light",
    "x": 579.9999389648438,
    "y": 413.3333339691162,
    "wires": [["bea6ac6d48e00268"]]
  },
  {
    "id": "cbfd40bd21c5e080",
    "type": "subflow:c8cff3130fedb456",
    "z": "cc64dd72e548f89a",
    "name": "Get of value of key Fan",
    "x": 590,
    "y": 560,
    "wires": [["ad94c98b4df40846"]]
  },
  {
    "id": "5cdedc1853ef804e",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 5",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1940,
    "y": 440,
    "wires": []
  },
  {
    "id": "a40ab17285a30e01",
    "type": "debug",
    "z": "cc64dd72e548f89a",
    "name": "debug 20",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1940,
    "y": 360,
    "wires": []
  },
  {
    "id": "668a01cb38479b64",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": " Get Temperature",
    "info": "",
    "x": 760,
    "y": 760,
    "wires": []
  },
  {
    "id": "0a9a5b6bfe490cd6",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Get Humidity",
    "info": "",
    "x": 770,
    "y": 960,
    "wires": []
  },
  {
    "id": "dcb877ec8b07b4fc",
    "type": "comment",
    "z": "cc64dd72e548f89a",
    "name": "Battery widget",
    "info": "",
    "x": 190,
    "y": 1140,
    "wires": []
  },
  {
    "id": "952577acc41c307d",
    "type": "subflow:227ddad2c9e7f866",
    "z": "cc64dd72e548f89a",
    "name": "Get Current Temperature From Anedya",
    "x": 790,
    "y": 800,
    "wires": [["f6a975daf07485e8", "8e9a4a6a9d353943", "dce12d47baa079ca"]]
  },
  {
    "id": "bb21209b955fb1f3",
    "type": "subflow:0b2ea012802cacb5",
    "z": "cc64dd72e548f89a",
    "name": "Get Current Humidity From Anedya",
    "x": 780,
    "y": 1000,
    "wires": [["4374941834cd5278", "542ee6e44901b351", "7179195eaf859061"]]
  },
  {
    "id": "1b2f80745ba30142",
    "type": "ui-form",
    "z": "24e1411905e488b9",
    "name": "Set Anedya connection credentials",
    "group": "65d2902c5e05e02c",
    "label": "",
    "order": 1,
    "width": "4",
    "height": "1",
    "options": [
      {
        "label": "Node Id",
        "key": "nodeId",
        "type": "text",
        "required": true,
        "rows": null
      },
      {
        "label": "Api key",
        "key": "apiKey",
        "type": "text",
        "required": true,
        "rows": null
      }
    ],
    "formValue": { "nodeId": "", "apiKey": "" },
    "payload": "",
    "submit": "Set",
    "cancel": "clear",
    "resetOnSubmit": false,
    "topic": "payload",
    "topicType": "msg",
    "splitLayout": false,
    "className": "",
    "passthru": false,
    "dropdownOptions": [],
    "x": 283.7500305175781,
    "y": 182.49999618530273,
    "wires": [["c2e2d15e0820f94d"]]
  },
  {
    "id": "c2e2d15e0820f94d",
    "type": "function",
    "z": "24e1411905e488b9",
    "name": "func to set the nodeId and apiKey",
    "func": "let form_data=msg.payload\nlet NODE_ID=form_data.nodeId\nlet API_KEY=form_data.apiKey\nglobal.set(\"NODE_ID\",NODE_ID)\nglobal.set(\"API_KEY\",API_KEY)\nlet get_nodeId=global.get(\"NODE_ID\")\nlet get_apiKey=global.get(\"API_KEY\")\nlet json_payload={\n    \"node_id\":get_nodeId,\n    \"api_key\":get_apiKey\n}\nmsg.credentials=JSON.stringify(json_payload);\nmsg.payload=\"Node Id and API key saved successfully.\"\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 180,
    "wires": [["c2f171b4bb0c1718"]]
  },
  {
    "id": "2932098ed8720f05",
    "type": "inject",
    "z": "24e1411905e488b9",
    "name": "Set Global Var",
    "props": [{ "p": "payload" }, { "p": "topic", "vt": "str" }],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 249.58332061767578,
    "y": 419.16665840148926,
    "wires": [["b626d49dbc2dbd96"]]
  },
  {
    "id": "b626d49dbc2dbd96",
    "type": "function",
    "z": "24e1411905e488b9",
    "name": "Set Global Var",
    "func": "global.set(\"humLastFetchDataTimesatamp\",0);\nglobal.set(\"tempLastFetchDataTimesatamp\",0);\nglobal.set(\"is_device_on\",true);\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 600,
    "y": 420,
    "wires": [[]]
  },
  {
    "id": "7c785ea8a6800754",
    "type": "function",
    "z": "24e1411905e488b9",
    "name": "func to set the nodeId and apiKey",
    "func": "let form_data=msg.payload\nlet NODE_ID=\"20deeee8-f8ae-11ee-9dd8-c3aa61afe2fb\"\nlet API_KEY=\"c93b7fdbcb11a189e8f33a89d1bfa56f92836d5ed3c148ec9bf912f29a9abee5\"\nglobal.set(\"NODE_ID\",NODE_ID)\nglobal.set(\"API_KEY\",API_KEY)\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 260,
    "wires": [[]]
  },
  {
    "id": "d054ea19cad98094",
    "type": "inject",
    "z": "24e1411905e488b9",
    "name": "",
    "props": [{ "p": "payload" }, { "p": "topic", "vt": "str" }],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 230,
    "y": 260,
    "wires": [["7c785ea8a6800754"]]
  },
  {
    "id": "1b29c992f81233aa",
    "type": "ui-template",
    "z": "24e1411905e488b9",
    "group": "ad25646ff154522b",
    "page": "",
    "ui": "",
    "name": "Open Admin Panel Button-Localhost",
    "order": 1,
    "width": 0,
    "height": 0,
    "head": "",
    "format": "<template>\n    <div>\n        <v-btn @click=\"openAdminPanel()\">Open Admin Panel [Localhost]</v-btn>\n    </div>\n</template>\n\n<script>\n    export default {\n\n        methods: {\n            // expose a method to our <template> and Vue Application\n            openAdminPanel: function () {\n               // this.count++\n                // Opens a new tab or window with the specified URL\n                window.open('http://localhost:3000/admin', '_blank');\n            }\n        },\n\n    }\n</script>\n",
    "storeOutMessages": true,
    "passthru": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "",
    "x": 430,
    "y": 540,
    "wires": [[]]
  },
  {
    "id": "ff275d84dd7c50cc",
    "type": "comment",
    "z": "24e1411905e488b9",
    "name": "Open Admin Panel",
    "info": "",
    "x": 245.8333969116211,
    "y": 494.1666593551636,
    "wires": []
  },
  {
    "id": "c2f171b4bb0c1718",
    "type": "ui-notification",
    "z": "24e1411905e488b9",
    "ui": "2a4cccc1f2ec666f",
    "position": "bottom right",
    "colorDefault": false,
    "color": "#0de732",
    "displayTime": "5",
    "showCountdown": true,
    "outputs": 1,
    "allowDismiss": false,
    "dismissText": "close",
    "allowConfirm": false,
    "confirmText": "Confirm",
    "raw": false,
    "className": "",
    "name": "",
    "x": 1050,
    "y": 180,
    "wires": [[]]
  },
  {
    "id": "4a0b67861a64ee85",
    "type": "ui-template",
    "z": "7bef6a87fd115472",
    "group": "",
    "page": "91ca877ba92392b8",
    "ui": "",
    "name": "Home Page CSS",
    "order": 2,
    "width": 0,
    "height": 0,
    "head": "",
    "format": "<style>\n  .my-custom-class {\n    //background-color: #4CAF50; /* Green background */\n    //color: white; /* White text */\n    //border-radius: 5px; /* Rounded corners */\n    // margin-top:0;\n    // padding-top:0;\n    height: 15rem;\n    margin-bottom: 4rem;\n  }\n\n  .custom-gauge-css {\n   // padding-top: 1rem;\n   // margin-bottom: 1rem;\n  }\n\n  .branding-custom-class {\n        display: -webkit-box; /* Old Safari */\n    display: -ms-flexbox; /* IE 10 */\n    display: flex; /* Modern Browsers */\n    height: 18.3em;\n    padding:0;\n    margin:0;\n    //padding-bottom: 2rem;\n  }\n\n\n</style>",
    "storeOutMessages": true,
    "passthru": true,
    "resendOnRefresh": true,
    "templateScope": "widget:page",
    "className": "",
    "x": 230,
    "y": 80,
    "wires": [[]]
  },
  {
    "id": "4f8cba114f31fb56",
    "type": "ui-template",
    "z": "7bef6a87fd115472",
    "group": "7da969187e283dbb",
    "page": "",
    "ui": "",
    "name": "Branding",
    "order": 1,
    "width": "4",
    "height": "2",
    "head": "",
    "format": "<div style=\"text-align: center; padding: 10px; background-color: #f8f9fa; border-bottom: 2px solid #007bff;\">\n    <img src=\"https://cdn.anedya.io/anedya_logo_light.svg\" alt=\"Company Logo\" style=\"height: 6em; width:18em; margin-top:2em\">\n    <h1 style=\"color: #007bff;\"> Anedya </h1>\n    <p style=\"font-size: 18px; color: #555; margin-bottom:0; padding-bottom:0;\">One Stop, IoT Cloud!</p>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\">\n</div>\n\n<style>\n    /* Custom styles for branding */\n    body {\n        font-family: Arial, sans-serif;\n    }\n    h1 {\n        margin: 5px 0;\n    }\n    p {\n        margin: 2px 0;\n    }\n</style>",
    "storeOutMessages": true,
    "passthru": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "branding-custom-class",
    "x": 220,
    "y": 180,
    "wires": [[]]
  },
  {
    "id": "cc01bc76aa045d15",
    "type": "comment",
    "z": "7bef6a87fd115472",
    "name": "Anedya Branding Node",
    "info": "",
    "x": 160,
    "y": 140,
    "wires": []
  },
  {
    "id": "b824a1dfd0689e47",
    "type": "comment",
    "z": "7bef6a87fd115472",
    "name": "UI CSS Handler",
    "info": "",
    "x": 140,
    "y": 40,
    "wires": []
  }
]
